### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input EnumSiteInformationTypeFilter {
  equals: SiteInformationType
  in: [SiteInformationType!]
  not: NestedEnumSiteInformationTypeFilter
  notIn: [SiteInformationType!]
}

"""newFile 있는 경우 newFile 우선"""
input FileUpdateInput {
  existingFile: FileUri
  newFile: Upload
}

"""string과 똑같습니다(S3상 파일 URI 표기용 스칼라)."""
scalar FileUri

"""original 제외하고는 없으면 썸네일 만드는 구조이므로 필요 시에만 필드에 포함해주세요."""
type Image {
  """원본이미지 크기 기준 - large : 1/2로 썸네일 생성됩니다."""
  large: FileUri!

  """원본이미지 크기 기준 - medium : 1/4로 썸네일 생성됩니다."""
  medium: FileUri!

  """원본 이미지"""
  original: FileUri!

  """원본이미지 크기 기준 - small : 1/6로 썸네일 생성됩니다."""
  small: FileUri!
}

type Mutation {
  renewToken(accessToken: String!, refreshToken: String!): SignInType
  requestPhoneVerificationByEveryone(phoneNumber: String!): Boolean!
  updateSiteInformationByAdmin(
    """
    id가 HTML_ , URL_ , TEXT_ 로 시작하는 경우 필수
     URL_인 경우 http(s)로 시작하지 않으면 알아서 http를 붙입니다.
    """
    content: String

    """
    id가 FILE_ 혹은 FILES_ 로 시작하는 경우 필수 
      FILE_ 인 경우에는 첫 번째 파일만 반영됩니다.
    """
    files: [FileUpdateInput!]
    siteInformationId: String!

    """id가 TC_ 로 시작하는 경우 필수"""
    titleContentData: [SiteInformationTitleContentDataInput!]
  ): Boolean!
  verifyPhoneByEveryone(phoneNumber: String!, verificationNumber: String!): Int!
}

input NestedEnumSiteInformationTypeFilter {
  equals: SiteInformationType
  in: [SiteInformationType!]
  not: NestedEnumSiteInformationTypeFilter
  notIn: [SiteInformationType!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  selectSiteInformationByEveryone(id: String!): SiteInformation!
  selectSiteInformationsByEveryone(cursor: SiteInformationWhereUniqueInput, orderBy: [SiteInformationOrderByWithRelationInput!], skip: Int, take: Int, where: SiteInformationWhereInput): [SiteInformation!]!
  whoami: String
}

type SignInType {
  accessToken: String!
  refreshToken: String!
}

type SiteInformation {
  content: String!

  """해당 필드의 설명"""
  description: String!
  file: FileUri
  files: [FileUri]

  """
  시작값(id의 startsWith() 적용으로 판별 가능한) 기준
   - `TC_` : 제목-내용 형태의 자료 (titleContentInfo 필드 참조)
   - `HTML_` : HTML 형태의 파일 (file 필드 참조)
   - `FILE_` : 기타 파일 1개 (file 필드 참조)
   - `FILES_` : 기타 파일 0~n개 (files 필드 참조)
   - `URL_` : 외부 URL (링크 설정 안 된 경우 null)(url 필드 참조)
   - `TEXT_` : 단순 텍스트 (content 필드 참조)
  """
  id: String!
  titleContentInfo: [SiteInformationTitleContentData!]
  type: SiteInformationType!

  """URL_ 의 경우, 링크 설정이 안 되어 있으면 null로 리턴합니다."""
  url: String
}

input SiteInformationOrderByWithRelationInput {
  content: SortOrder
  description: SortOrder
  id: SortOrder
  type: SortOrder
}

type SiteInformationTitleContentData {
  content: String!
  title: String!
}

input SiteInformationTitleContentDataInput {
  content: String!
  title: String!
}

enum SiteInformationType {
  ALL
}

input SiteInformationWhereInput {
  AND: [SiteInformationWhereInput!]
  NOT: [SiteInformationWhereInput!]
  OR: [SiteInformationWhereInput!]
  content: StringFilter
  description: StringFilter
  id: StringFilter
  type: EnumSiteInformationTypeFilter
}

input SiteInformationWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
